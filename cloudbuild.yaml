substitutions:
  _PROJECT_ID: "physiotherapy-clinic-431212"
  _BUILD_ID: "latest"

steps:
  # Step 1: Check for Existing Docker Images in GCR (if necessary)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'Check for Existing Images'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Starting image check process"
        
        echo "Project ID: ${_PROJECT_ID}"
        echo "Build ID: ${_BUILD_ID}"

        services=("appointment-service" "token-service" "user-service" "frontend")
        
        for service in "${services[@]}"; do
          image="gcr.io/${_PROJECT_ID}/$service"
          echo "Checking if $image exists..."
          
          # Check if the image exists in GCR (without tag)
          image_exists=$(gcloud container images list-tags $image --filter="tags=${_BUILD_ID}" --format="get(digest)")

          if [ -n "$image_exists" ]; then
            echo "$service image already exists: $image:${_BUILD_ID}"
            echo "Deleting existing image..."
            gcloud container images delete $image:${_BUILD_ID} --quiet --force-delete-tags
          else
            echo "$service image does not exist, will be built."
          fi
        done

        echo "Image check process complete"

  # Step 2: Build and Deploy Frontend to Cloud Run (from source, not from pre-built GCR image)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy Frontend to Cloud Run from Source'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Deploying frontend to Cloud Run using source code."
        gcloud run deploy frontend \
        --source frontend/ \
        --platform managed \
        --region europe-central2 \
        --allow-unauthenticated
    waitFor: ['Check for Existing Images']

  # Step 3: Prepare WAR Files for Backend Docker Build
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'Prepare WAR Files'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      services=("appointment-service" "token-service" "user-service")
      version="0.0.1-SNAPSHOT"
      success=true

      for service in "${services[@]}"; do
        echo "Checking WAR file for $service..."
        war_file=$(find backend/${service}/build/libs -name "${service}-${version}.war" -print -quit)

        if [ -n "$war_file" ]; then
          expected_location="backend/${service}/build/libs/${service}-${version}.war"
          
          if [ "$war_file" = "$expected_location" ]; then
            echo "WAR file for $service is already in the correct location: $war_file"
          else
            echo "WAR file for $service is not in the expected location. Moving to: $expected_location"
            mv "$war_file" "$expected_location"
          fi
        else
          echo "ERROR: WAR file for $service not found!"
          success=false
        fi
      done

      if [ "$success" = "false" ]; then
        echo "One or more WAR files are missing. Exiting..."
        exit 1
      fi

  # Step 4: Build Backend Docker Images (excluding frontend)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Backend Docker Images'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        services=("appointment-service" "token-service" "user-service")
        for service in "${services[@]}"; do
          image="gcr.io/${_PROJECT_ID}/$service:${_BUILD_ID}"
          if [ -f "backend/${service}/Dockerfile" ]; then
            echo "Building image for $service..."
            cd backend/$service
            docker build -t $image .
            cd ../../
          else
            echo "Dockerfile not found for $service, skipping build."
          fi
        done
    waitFor: ['Prepare WAR Files']

  # Step 5: Push Backend Docker Images to GCR
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Backend Docker Images'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        services=("appointment-service" "token-service" "user-service")
        for service in "${services[@]}"; do
          image="gcr.io/${_PROJECT_ID}/$service:${_BUILD_ID}"
          if [ -f "backend/${service}/Dockerfile" ]; then
            echo "Pushing image for $service..."
            docker push $image
          else
            echo "Dockerfile not found for $service, skipping push."
          fi
        done
    waitFor: ['Build Backend Docker Images']

  # Step 6a: Deploy Backend Services to `autopilot-cluster-1` (for eureka-server and api-gateway)
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'Deploy to GKE Cluster 1'
    entrypoint: 'bash'
    args: 
      - '-c'
      - |
        echo "Deploying services to cluster-1"
        gcp_clustername="autopilot-cluster-1"
        gcp_clusterzone="europe-central2"
        namespace="default"
        gcloud container clusters get-credentials $gcp_clustername --zone $gcp_clusterzone --project ${_PROJECT_ID}

        # Delete existing services and deployments in Cluster 1
        kubectl delete deployment,service --all -n $namespace
        
        echo "Checking existing services before deployment:"
        kubectl get services -n $namespace

        # Step 1: Deploy needed services (appointment-service, token-service, user-service)
        services=('appointment-service' 'token-service' 'user-service')
        for service in "${services[@]}"; do
          serviceExists=$(kubectl get service ${service} -n $namespace --ignore-not-found)
          if [ -z "$serviceExists" ]; then
            echo "${service} service does not exist. Deploying..."
            kubectl apply -f k8s/${service}-deployment.yaml -n $namespace
            kubectl apply -f k8s/${service}-service.yaml -n $namespace
          else
            echo "${service} service already exists. Deleting and redeploying..."
            # Delete existing service and deployment
            kubectl delete deployment ${service} -n $namespace
            kubectl delete service ${service} -n $namespace
            # Re-apply YAML files for deployment and service
            kubectl apply -f k8s/${service}-deployment.yaml -n $namespace
            kubectl apply -f k8s/${service}-service.yaml -n $namespace
          fi

          # Wait for the service to be ready
          echo "Waiting for ${service} to become ready..."
          kubectl wait --for=condition=ready pod -l app=${service} -n $namespace --timeout=300s

          # Check if the pod is running or provide logs for failure
          if [ $? -ne 0 ]; then
            echo "${service} pod did not become ready in time. Collecting pod logs..."
            kubectl describe pod -l app=${service} -n $namespace
            kubectl logs -l app=${service} -n $namespace
            exit 1
          fi
        done

        echo "Checking services after deployment:"
        kubectl get services -n $namespace
        kubectl get pods -n $namespace
        kubectl get deployments -n $namespace
        echo "Deploying services to cluster-1 successful"

    waitFor: ['Push Backend Docker Images']
